# Makefile for the new architeture developed into contiki
# This makefile is called by the makefile of the mote platform

IOTUS_FOLDER_MAIN          = iotus-arch
IOTUS_FOLDER_SERVICE       = services
IOTUS_FOLDER_TRANSPORT     = layer-transport-protocols
IOTUS_FOLDER_ROUTING       = layer-routing-protocols
IOTUS_FOLDER_DATA_LINK     = layer-data-link-protocols
IOTUS_FOLDER_RADIO_DRIVERS = layer-radio-drivers
IOTUS_FOLDER_SHARED_UTILS  = shared-utils
IOTUS_DYNAMIC_HEADER_FILE  = dyn-iotus-include-list.h
IOTUS_FOLDER_NET_DEFINES   = net-defines

IOTUS_FOLDER          := $(CONTIKI)/$(IOTUS_FOLDER_MAIN)
SERVICES_FOLDER       := $(IOTUS_FOLDER)/$(IOTUS_FOLDER_SERVICE)
TRANSPORT_FOLDER      := $(IOTUS_FOLDER)/$(IOTUS_FOLDER_TRANSPORT)
ROUTING_FOLDER        := $(IOTUS_FOLDER)/$(IOTUS_FOLDER_ROUTING)
DATA_LINK_FOLDER      := $(IOTUS_FOLDER)/$(IOTUS_FOLDER_DATA_LINK)
RADIO_DRIVERS_FOLDER  := $(IOTUS_FOLDER)/$(IOTUS_FOLDER_RADIO_DRIVERS)

RELATIVE_FOLDER_SERVICES      := $(IOTUS_FOLDER_MAIN)/$(IOTUS_FOLDER_SERVICE)
RELATIVE_FOLDER_TRANSPORT     := $(IOTUS_FOLDER_MAIN)/$(IOTUS_FOLDER_TRANSPORT)
RELATIVE_FOLDER_ROUTING       := $(IOTUS_FOLDER_MAIN)/$(IOTUS_FOLDER_ROUTING)
RELATIVE_FOLDER_DATA_LINK     := $(IOTUS_FOLDER_MAIN)/$(IOTUS_FOLDER_DATA_LINK)
RELATIVE_FOLDER_RADIO_DRIVERS := $(IOTUS_FOLDER_MAIN)/$(IOTUS_FOLDER_RADIO_DRIVERS)
RELATIVE_FOLDER_SHARED_UTILS  := $(IOTUS_FOLDER_MAIN)/$(IOTUS_FOLDER_SHARED_UTILS)
RELATIVE_FOLDER_NET_DEFINED   := $(IOTUS_FOLDER_MAIN)/dev/$(IOTUS_FOLDER_NET_DEFINES)

comma:=,
empty:=
space:=$(empty) $(empty)
quotes:="
define linefeed


endef

# Funtions for this makefile
reverse = $(if $(1),$(call reverse,$(wordlist 2,$(words $(1)),$(1)))) $(firstword $(1))
complete_buffer_with_zero = $(if $(filter 8,$(1)),,\
  $(eval $(2):=$($(2))0) \
  $(call complete_buffer_with_zero,$(shell expr $(1) + 1),$(2)) \
)

# Recursivily add dependencies
add_sub_dependencies = $(call recursirve_add_dependencies,$($(1)),$(1))
recursirve_add_dependencies = $(if $(1),\
  $(foreach service,$(1),\
    $(eval IOTUS_SERVICE_DEPENDENCIES_LIST := )\
    $(eval include $(SERVICES_FOLDER)/$(service)/dependencies.$(service)) \
    $(eval new_services_to_include := $(filter-out $($(2)),$(IOTUS_SERVICE_DEPENDENCIES_LIST)))\
    $(eval $(2) := $(new_services_to_include) $($(2))) \
    $(call recursirve_add_dependencies,$(new_services_to_include),$(2))\
  ))

# Verify if user defined which layer will be used
ifndef IOTUS_CONF_USING_TRANSPORT
  $(error Application makefile must define IOTUS_CONF_USING_TRANSPORT equals to 0 or 1)
endif
CFLAGS+= -DIOTUS_CONF_USING_TRANSPORT=$(IOTUS_CONF_USING_TRANSPORT)
ifndef IOTUS_CONF_USING_ROUTING
  $(error Application makefile must define IOTUS_CONF_USING_ROUTING equals to 0 or 1)
endif
CFLAGS+= -DIOTUS_CONF_USING_ROUTING=$(IOTUS_CONF_USING_ROUTING)
ifndef IOTUS_CONF_USING_DATA_LINK
  $(error Application makefile must define IOTUS_CONF_USING_DATA_LINK equals to 0 or 1)
endif
CFLAGS+= -DIOTUS_CONF_USING_DATA_LINK=$(IOTUS_CONF_USING_DATA_LINK)


# Verify if user defined a type of compilation mode
ifdef IOTUS_CONF_COMPILE_MODE
  COMPILE_MODE_UPPERCASE := $(strip $(shell echo $(IOTUS_CONF_COMPILE_MODE) | sed y!$(LOWERCASE)!$(UPPERCASE)!))
  ifneq (,$(findstring DYNAMIC,$(COMPILE_MODE_UPPERCASE)))

  #$%^$%^$^$^$^#$#%@#%$#%@#$%$@%$#^#$^@#$$^%$^@#$#$^$%^%@$#$^%^@$##$#@$%%$^^$EWEWR^^^$#%@$#%^@$%@
  #$%^$%^$^$^$^#$#%@#%$#%@#$%$@%$#^#$^    DYNAMIC    %^%@$#$^%^@$##$#@$%%$^^$EWEWR^^^$#%@$#%^@$%@
  #$%^$%^$^$^$^#$#%@#%$#%@#$%$@%$#^#$^@#$$^%$^@#$#$^$%^%@$#$^%^@$##$#@$%%$^^$EWEWR^^^$#%@$#%^@$%@

    $(info IoTUS net stack compiling in "Dynamic" mode.)
    ifndef IOTUS_CONF_DYNAMIC_MODE_PROFILES
      # If profiles are no defined, then he list of protocols has to be defined
      ifeq ($(IOTUS_CONF_USING_TRANSPORT),1)
        ifndef TRANSPORT_PROTOCOLS_LIST
          $(error In IoTUS dynamic mode, IOTUS_CONF_DYNAMIC_MODE_PROFILES or the list of TRANSPORT_PROTOCOLS_LIST protocols must be defined)
        endif
      endif

      ifeq ($(IOTUS_CONF_USING_ROUTING),1)
        ifndef ROUTING_PROTOCOLS_LIST
          $(error In IoTUS dynamic mode, IOTUS_CONF_DYNAMIC_MODE_PROFILES or the list of ROUTING_PROTOCOLS_LIST protocols must be defined)
        endif
      endif

      ifeq ($(IOTUS_CONF_USING_DATA_LINK),1)
        ifndef DATA_LINK_PROTOCOLS_LIST
          $(error In IoTUS dynamic mode, IOTUS_CONF_DYNAMIC_MODE_PROFILES or the list of DATA_LINK_PROTOCOLS_LIST protocols must be defined)
        endif
      endif
    endif

    ifndef IOTUS_CONF_RADIO_DRIVERS_LIST
      $(error In IoTUS dynamic mode, IOTUS_CONF_RADIO_DRIVERS_LIST must be defined within the platform makefile)
    endif


    include $(IOTUS_FOLDER)/iotus-profiles-list

    ifdef IOTUS_CONF_DYNAMIC_MODE_PROFILES
      COMPILE_MODE_DYN_UPPERCASE := $(strip $(shell echo $(IOTUS_CONF_DYNAMIC_MODE_PROFILES) | sed y!$(LOWERCASE)!$(UPPERCASE)!))
      $(info Using the following profiles- $(COMPILE_MODE_DYN_UPPERCASE))

      # Get the list of protocols to be compiled
      $(foreach profile, $(COMPILE_MODE_DYN_UPPERCASE), \
        $(eval TRANSPORT_PROTOCOLS_FULL_LIST += $$($(profile)_TRANSPORT)) \
        $(eval ROUTING_PROTOCOLS_FULL_LIST += $$($(profile)_ROUTING)) \
        $(eval DATA_LINK_PROTOCOLS_FULL_LIST += $$($(profile)_DATA_LINK)) \
      )

      # Remove duplicates
      IOTUS_CONF_TRANSPORT_PROTOCOLS_LIST := $(sort $(TRANSPORT_PROTOCOLS_FULL_LIST))
      IOTUS_CONF_ROUTING_PROTOCOLS_LIST := $(sort $(ROUTING_PROTOCOLS_FULL_LIST))
      IOTUS_CONF_DATA_LINK_PROTOCOLS_LIST := $(sort $(DATA_LINK_PROTOCOLS_FULL_LIST))
    endif

    CFLAGS+= -DIOTUS_COMPILE_MODE_DYNAMIC


    ############################################################################
    # Create the radios list
    $(foreach radio_driver, $(IOTUS_CONF_RADIO_DRIVERS_LIST), \
      $(eval IOTUS_RADIO_DRIVER_NAME := ) \
      $(eval THIS_MODULE_FOLDER := $(RELATIVE_FOLDER_RADIO_DRIVERS)/$(radio_driver)) \
      $(eval THIS_SUB_MODULES := ) \
      $(eval include $(RADIO_DRIVERS_FOLDER)/$(radio_driver)/Makefile.$(radio_driver)) \
      $(eval MODULES += $(THIS_SUB_MODULES) $(THIS_MODULE_FOLDER)) \
      $(if $(IOTUS_RADIO_DRIVER_NAME),, \
        $(error IOTUS_RADIO_DRIVER_NAME for $(radio_driver) is not defined!) \
      ) \
      $(eval temp_modules_main_header_list += $(IOTUS_RADIO_DRIVER_NAME).h) \
      $(if $(filter $(IOTUS_RADIO_DRIVER_NAME),$(IOTUS_RADIO_DRIVERS_ENUM_OPTIONS)), \
        $(error $(1) protocol name $(IOTUS_RADIO_DRIVER_NAME) is not unique!) \
      ) \
      $(eval IOTUS_RADIO_DRIVERS_ENUM_OPTIONS += $(IOTUS_RADIO_DRIVER_NAME)) \
      $(eval IOTUS_RADIO_DRIVERS_LIST += $(IOTUS_RADIO_DRIVER_NAME)_radio_driver) \
    )
    ############################################################################
    # Add every service and its dependencies to the list of compilation
    add_protocols_dependencies = \
      $(foreach protocol, $(IOTUS_CONF_$(1)_PROTOCOLS_LIST), \
        $(eval IOTUS_SERVICE_DEPENDENCIES_LIST := ) \
        $(eval include $($(1)_FOLDER)/$(protocol)/dependencies.$(protocol)) \
        $(eval IOTUS_SERVICE_DEPENDENCIES_LIST_FINAL += $(IOTUS_SERVICE_DEPENDENCIES_LIST)) \
        $(eval temp_protocol_dedicated_list := $(IOTUS_SERVICE_DEPENDENCIES_LIST)) \
        $(call add_sub_dependencies,temp_protocol_dedicated_list) \
        $(eval IOTUS_$(1)_$(protocol)_SPECIFIC_SERVICES := $(temp_protocol_dedicated_list)) \
      )

    ifeq ($(IOTUS_CONF_USING_TRANSPORT),1)
    # Execute this for Transport
    $(call add_protocols_dependencies,TRANSPORT)
    endif
    ifeq ($(IOTUS_CONF_USING_ROUTING),1)
    # Execute this for Routing
    $(call add_protocols_dependencies,ROUTING)
    endif
    ifeq ($(IOTUS_CONF_USING_DATA_LINK),1)
    # Execute this for Data link
    $(call add_protocols_dependencies,DATA_LINK)
    endif
    ############################################################################

    # Clean duplicates in service list
    IOTUS_SERVICES_LIST := $(sort $(IOTUS_SERVICE_DEPENDENCIES_LIST_FINAL))

    # Expand the service list to their own dependencies
    $(call add_sub_dependencies,IOTUS_SERVICES_LIST)

    service_counter := 0
    # Go for the compilation step of each service
    $(foreach service, $(IOTUS_SERVICES_LIST), \
      $(eval IOTUS_SERVICE_NAME := ) \
      $(eval THIS_MODULE_FOLDER := $(RELATIVE_FOLDER_SERVICES)/$(service)) \
      $(eval THIS_SUB_MODULES := ) \
      $(eval include $(SERVICES_FOLDER)/$(service)/Makefile.$(service)) \
      $(eval MODULES += $(THIS_SUB_MODULES) $(THIS_MODULE_FOLDER)) \
      $(if $(IOTUS_SERVICE_NAME),,\
        $(error IOTUS_SERVICE_NAME for $(service) is not defined!)\
      ) \
      $(eval temp_modules_main_header_list += $(IOTUS_SERVICE_NAME).h) \
      $(if $(filter $(IOTUS_SERVICE_NAME),$(IOTUS_SERVICE_STRUCT_LIST)),\
        $(error Service name $(IOTUS_SERVICE_NAME) is not unique!)\
      ) \
      $(eval service_counter := $(shell expr $(service_counter) + 1 )) \
      $(eval IOTUS_SERVICE_MODULES_LIST := $(IOTUS_SERVICE_MODULES_LIST) iotus_signal_handler_$(IOTUS_SERVICE_NAME)) \
    )

    # Determine the size of the buffer that each buffer will have to hold for every service
    IOTUS_DEPENDENCIES_BUFFER_SIZE := $(shell expr \( 7 + $(service_counter) \) / 8)
    CFLAGS += -DIOTUS_DEPENDENCIES_BUFFER_SIZE=$(IOTUS_DEPENDENCIES_BUFFER_SIZE)
    CFLAGS += -DIOTUS_TOTAL_SERVICES_INSTALLED=$(service_counter)

    IOTUS_SERVICE_MODULES_LIST_WCOMMA := \{$(subst $(space),$(comma),$(addprefix \&,$(IOTUS_SERVICE_MODULES_LIST)))\}
    CFLAGS += -DIOTUS_SERVICE_MODULES_LIST=$(IOTUS_SERVICE_MODULES_LIST_WCOMMA)

    #######################################################################################
    # Add every protocol`s makefiles and set their own define of service that will be used
    add_protocols_makefile = \
      $(foreach protocol, $(IOTUS_CONF_$(1)_PROTOCOLS_LIST), \
        $(eval IOTUS_PROTOCOL_NAME := ) \
        $(eval THIS_MODULE_FOLDER := $(RELATIVE_FOLDER_$(1))/$(protocol)) \
        $(eval THIS_SUB_MODULES := ) \
        $(eval include $($(1)_FOLDER)/$(protocol)/Makefile.$(protocol)) \
        $(eval MODULES += $(THIS_SUB_MODULES) $(THIS_MODULE_FOLDER)) \
        $(if $(IOTUS_PROTOCOL_NAME),,\
          $(error IOTUS_PROTOCOL_NAME for $(protocol) is not defined!)\
        ) \
        $(eval temp_modules_main_header_list += $(IOTUS_PROTOCOL_NAME).h)\
        $(if $(filter $(IOTUS_PROTOCOL_NAME),$(IOTUS_PROTOCOL_$(1)_ENUM_OPTIONS)),\
          $(error $(1) protocol name $(IOTUS_PROTOCOL_NAME) is not unique!)\
        ) \
        $(eval IOTUS_PROTOCOL_$(1)_ENUM_OPTIONS += $(IOTUS_PROTOCOL_NAME)) \
        $(eval IOTUS_PROTOCOL_$(1)_LIST += $(IOTUS_PROTOCOL_NAME)_protocol) \
        $(eval buffer_creator_counter := 0) \
        $(eval temp_buffer_creator={0b) \
        $(foreach service_used,$(IOTUS_SERVICES_LIST), \
          $(if $(filter 8,$(buffer_creator_counter)),\
            $(eval temp_buffer_creator:=$(temp_buffer_creator),0b)\
            $(eval buffer_creator_counter := 0)\
          )\
          $(eval buffer_creator_counter := $(shell expr $(buffer_creator_counter) + 1)) \
          $(if $(filter $(service_used),$(IOTUS_$(1)_$(protocol)_SPECIFIC_SERVICES)), \
            $(eval temp_buffer_creator:=$(temp_buffer_creator)1), \
            $(eval temp_buffer_creator:=$(temp_buffer_creator)0) \
          ) \
        ) \
        $(call complete_buffer_with_zero,$(buffer_creator_counter),temp_buffer_creator) \
        $(if $(IOTUS_LAYER_$(1)_SERVICE_ARRAY),\
          $(eval IOTUS_LAYER_$(1)_SERVICE_ARRAY:=$(IOTUS_LAYER_$(1)_SERVICE_ARRAY),$(temp_buffer_creator)}), \
          $(eval IOTUS_LAYER_$(1)_SERVICE_ARRAY:=$(temp_buffer_creator)}) \
        ) \
      )

    ifeq ($(IOTUS_CONF_USING_TRANSPORT),1)
    # Execute this for Transport
    $(call add_protocols_makefile,TRANSPORT)
    endif
    ifeq ($(IOTUS_CONF_USING_ROUTING),1)
    # Execute this for Routing
    $(call add_protocols_makefile,ROUTING)
    endif
    ifeq ($(IOTUS_CONF_USING_DATA_LINK),1)
    # Execute this for Data link
    $(call add_protocols_makefile,DATA_LINK)
    endif
    #######################################################################################

    $(info Transport protocols used are: $(IOTUS_PROTOCOL_TRANSPORT_ENUM_OPTIONS))
    $(info Routing protocols used are: $(IOTUS_PROTOCOL_ROUTING_ENUM_OPTIONS))
    $(info Data link protocols used are: $(IOTUS_PROTOCOL_DATA_LINK_ENUM_OPTIONS))
    $(info Radio drivers used are: $(IOTUS_RADIO_DRIVERS_ENUM_OPTIONS))
    $(info Services used are: $(IOTUS_SERVICES_LIST))

    # Create the dynamic header file that will carry all the protocols and services includes
    temp_list_all_modules := $(addsuffix $(quotes),\
      $(addprefix \#include:$(quotes),\
        $(sort $(temp_modules_main_header_list)) \
      )\
    )
    COMPLETE_PROTOCOL_SERVICE_LIST:=$(subst :,$(space),\
      $(subst $(space),$(linefeed),\
        $(temp_list_all_modules)\
      )\
    )
    CFLAGS += -DIOTUS_DYNAMIC_HEADER_FILE=\"$(IOTUS_DYNAMIC_HEADER_FILE)\"

    $(file >$(IOTUS_FOLDER)/$(IOTUS_DYNAMIC_HEADER_FILE),$(COMPLETE_PROTOCOL_SERVICE_LIST))

    ######################################################################################
    # Setup the defines into the system, to have enum and the arrays
    setup_protocol_defines_into_iotus_core = \
      $(eval IOTUS_PROTOCOL_$(1)_ENUM_OPTIONS_WCOMMA := \{$(subst $(space),$(comma),$(IOTUS_PROTOCOL_$(1)_ENUM_OPTIONS))\}) \
      $(eval IOTUS_PROTOCOL_$(1)_LIST_WCOMMA := \{$(subst $(space),$(comma),$(addprefix \&,$(IOTUS_PROTOCOL_$(1)_LIST)))\}) \
      $(eval CFLAGS += -DIOTUS_PROTOCOL_$(1)_ENUM_OPTIONS=$(IOTUS_PROTOCOL_$(1)_ENUM_OPTIONS_WCOMMA)) \
      $(eval CFLAGS += -DIOTUS_PROTOCOL_$(1)_LIST=$(IOTUS_PROTOCOL_$(1)_LIST_WCOMMA)) \
      $(eval temp_var_adding_brackets:=\{$(IOTUS_LAYER_$(1)_SERVICE_ARRAY)\}) \
      $(eval CFLAGS += -DIOTUS_LAYER_$(1)_SERVICE_ARRAY=$(temp_var_adding_brackets)) \


    ifeq ($(IOTUS_CONF_USING_TRANSPORT),1)
    # Execute this for Transport
    $(call setup_protocol_defines_into_iotus_core,TRANSPORT)
    endif
    ifeq ($(IOTUS_CONF_USING_ROUTING),1)
    # Execute this for Routing
    $(call setup_protocol_defines_into_iotus_core,ROUTING)
    endif
    ifeq ($(IOTUS_CONF_USING_DATA_LINK),1)
    # Execute this for Data link
    $(call setup_protocol_defines_into_iotus_core,DATA_LINK)
    endif

    ######################################################################################
    # Setup the defines for enum and arrays for the radio layer
    setup_radio_defines_into_iotus_core = \
      $(eval IOTUS_$(1)_ENUM_OPTIONS_WCOMMA := \{$(subst $(space),$(comma),$(IOTUS_$(1)_ENUM_OPTIONS))\}) \
      $(eval IOTUS_$(1)_LIST_WCOMMA := \{$(subst $(space),$(comma),$(addprefix \&,$(IOTUS_$(1)_LIST)))\}) \
      $(eval CFLAGS += -DIOTUS_$(1)_ENUM_OPTIONS=$(IOTUS_$(1)_ENUM_OPTIONS_WCOMMA)) \
      $(eval CFLAGS += -DIOTUS_$(1)_LIST=$(IOTUS_$(1)_LIST_WCOMMA)) \


    $(call setup_radio_defines_into_iotus_core,RADIO_DRIVERS)
  else
  #$%^$%^$^$^$^#$#%@#%$#%@#$%$@%$#^#$^@#$$^%$^@#$#$^$%^%@$#$^%^@$##$#@$%%$^^$EWEWR^^^$#%@$#%^@$%@
  #$%^$%^$^$^$^#$#%@#%$#%@#$%$@%$#^#$^     STATIC    %^%@$#$^%^@$##$#@$%%$^^$EWEWR^^^$#%@$#%^@$%@
  #$%^$%^$^$^$^#$#%@#%$#%@#$%$@%$#^#$^@#$$^%$^@#$#$^$%^%@$#$^%^@$##$#@$%%$^^$EWEWR^^^$#%@$#%^@$%@
    ifneq (,$(findstring STATIC,$(COMPILE_MODE_UPPERCASE)))
      $(info IoTUS net stack compiling in "static" mode.)

      # The protocols has to be defined
      ifeq ($(IOTUS_CONF_USING_TRANSPORT),1)
        ifndef IOTUS_CONF_STATIC_TRANSPORT_LAYER
          $(error In IoTUS static mode, IOTUS_CONF_STATIC_TRANSPORT_LAYER protocol must be defined)
        endif
      endif

      ifeq ($(IOTUS_CONF_USING_ROUTING),1)
        ifndef IOTUS_CONF_STATIC_ROUTING_LAYER
          $(error In IoTUS static mode, IOTUS_CONF_STATIC_ROUTING_LAYER protocol must be defined)
        endif
      endif

      ifeq ($(IOTUS_CONF_USING_DATA_LINK),1)
        ifndef IOTUS_CONF_STATIC_DATA_LINK_LAYER
          $(error In IoTUS static mode, IOTUS_CONF_STATIC_DATA_LINK_LAYER protocol must be defined)
        endif
      endif
      CFLAGS+= -DIOTUS_COMPILE_MODE_STATIC


      ############################################################################
      # Create the radios list, in static mode, only the first radio driver is used
      RADIO_DRIVER_USED := $(word 1,$(IOTUS_CONF_RADIO_DRIVERS_LIST))
      $(eval IOTUS_RADIO_DRIVER_NAME := )
      $(eval THIS_MODULE_FOLDER : = $(RELATIVE_FOLDER_RADIO_DRIVERS)/$(RADIO_DRIVER_USED))
      $(eval THIS_SUB_MODULES := )
      $(eval include $(RADIO_DRIVERS_FOLDER)/$(RADIO_DRIVER_USED)/Makefile.$(RADIO_DRIVER_USED))
      $(eval MODULES += $(THIS_SUB_MODULES) $(THIS_MODULE_FOLDER))
      $(if $(IOTUS_RADIO_DRIVER_NAME),,\
        $(error IOTUS_RADIO_DRIVER_NAME for $(RADIO_DRIVER_USED) is not defined!)\
      )
      $(eval temp_modules_main_header_list += $(IOTUS_RADIO_DRIVER_NAME).h)
      $(if $(filter $(IOTUS_RADIO_DRIVER_NAME),$(IOTUS_RADIO_DRIVERS_ENUM_OPTIONS)),\
        $(error Radio driver name $(IOTUS_RADIO_DRIVER_NAME) is not unique!)\
      )
      $(eval IOTUS_STATIC_PROTOCOL_RADIO_DRIVER := $(IOTUS_RADIO_DRIVER_NAME)_protocol) \

      ############################################################################
      # Add every service and its dependencies to the list of compilation
      add_protocols_dependencies = \
        $(foreach protocol, $(IOTUS_CONF_STATIC_$(1)_LAYER), \
          $(eval IOTUS_SERVICE_DEPENDENCIES_LIST := ) \
          $(eval include $($(1)_FOLDER)/$(protocol)/dependencies.$(protocol)) \
          $(eval IOTUS_SERVICE_DEPENDENCIES_LIST_FINAL += $(IOTUS_SERVICE_DEPENDENCIES_LIST)) \
        )

      ifeq ($(IOTUS_CONF_USING_TRANSPORT),1)
      # Execute this for Transport
      $(call add_protocols_dependencies,TRANSPORT)
      endif
      ifeq ($(IOTUS_CONF_USING_ROUTING),1)
      # Execute this for Routing
      $(call add_protocols_dependencies,ROUTING)
      endif
      ifeq ($(IOTUS_CONF_USING_DATA_LINK),1)
      # Execute this for Data link
      $(call add_protocols_dependencies,DATA_LINK)
      endif
      ############################################################################

      # Clean duplicates in service list
      IOTUS_SERVICES_LIST := $(sort $(IOTUS_SERVICE_DEPENDENCIES_LIST_FINAL))

      # Expand the service list to their own dependencies
      $(call add_sub_dependencies,IOTUS_SERVICES_LIST)

      service_counter := 0
      # Go for the compilation step of each service
      $(foreach service, $(IOTUS_SERVICES_LIST), \
        $(eval IOTUS_SERVICE_NAME := ) \
        $(eval THIS_MODULE_FOLDER := $(RELATIVE_FOLDER_SERVICES)/$(service)) \
        $(eval THIS_SUB_MODULES := ) \
        $(eval include $(SERVICES_FOLDER)/$(service)/Makefile.$(service)) \
        $(eval MODULES += $(THIS_SUB_MODULES) $(THIS_MODULE_FOLDER)) \
        $(if $(IOTUS_SERVICE_NAME),,\
          $(error IOTUS_SERVICE_NAME for $(service) is not defined!)\
        ) \
        $(eval temp_modules_main_header_list += $(IOTUS_SERVICE_NAME).h) \
        $(if $(filter $(IOTUS_SERVICE_NAME),$(IOTUS_SERVICE_STRUCT_LIST)),\
          $(error Service name $(IOTUS_SERVICE_NAME) is not unique!)\
        ) \
        $(eval service_counter := $(shell expr $(service_counter) + 1 )) \
        $(eval IOTUS_SERVICE_MODULES_LIST := $(IOTUS_SERVICE_MODULES_LIST) iotus_signal_handler_$(IOTUS_SERVICE_NAME)) \
      )

      # Determine the size of the buffer that each buffer will have to hold for every service
      CFLAGS += -DIOTUS_TOTAL_SERVICES_INSTALLED=$(service_counter)

      IOTUS_SERVICE_MODULES_LIST_WCOMMA := \{$(subst $(space),$(comma),$(addprefix \&,$(IOTUS_SERVICE_MODULES_LIST)))\}
      CFLAGS += -DIOTUS_SERVICE_MODULES_LIST=$(IOTUS_SERVICE_MODULES_LIST_WCOMMA)

      #######################################################################################
      # Add every protocol`s makefiles and set their own define of service that will be used
      add_protocols_makefile = \
        $(foreach protocol, $(IOTUS_CONF_STATIC_$(1)_LAYER), \
          $(eval IOTUS_PROTOCOL_NAME := ) \
          $(eval THIS_MODULE_FOLDER := $(RELATIVE_FOLDER_$(1))/$(protocol)) \
          $(eval THIS_SUB_MODULES := ) \
          $(eval include $($(1)_FOLDER)/$(protocol)/Makefile.$(protocol)) \
          $(eval MODULES += $(THIS_SUB_MODULES) $(THIS_MODULE_FOLDER)) \
          $(if $(IOTUS_PROTOCOL_NAME),,\
            $(error IOTUS_PROTOCOL_NAME for $(protocol) is not defined!)\
          ) \
          $(eval temp_modules_main_header_list += $(IOTUS_PROTOCOL_NAME).h) \
          $(if $(filter $(IOTUS_PROTOCOL_NAME),$(IOTUS_PROTOCOL_$(1)_ENUM_OPTIONS)),\
            $(error $(1) protocol name $(IOTUS_PROTOCOL_NAME) is not unique!)\
          ) \
          $(eval IOTUS_STATIC_PROTOCOL_$(1) := $(IOTUS_PROTOCOL_NAME)_protocol) \
        )

      ifeq ($(IOTUS_CONF_USING_TRANSPORT),1)
      # Execute this for Transport
      $(call add_protocols_makefile,TRANSPORT)
      endif
      ifeq ($(IOTUS_CONF_USING_ROUTING),1)
      # Execute this for Routing
      $(call add_protocols_makefile,ROUTING)
      endif
      ifeq ($(IOTUS_CONF_USING_DATA_LINK),1)
      # Execute this for Data link
      $(call add_protocols_makefile,DATA_LINK)
      endif
      #######################################################################################

      $(info Transport protocol used is: $(IOTUS_STATIC_PROTOCOL_TRANSPORT))
      $(info Routing protocol used is: $(IOTUS_STATIC_PROTOCOL_ROUTING))
      $(info Data link protocol used is: $(IOTUS_STATIC_PROTOCOL_DATA_LINK))
      $(info Radio driver used is: $(IOTUS_STATIC_PROTOCOL_RADIO_DRIVER))
      $(info Services used are: $(IOTUS_SERVICES_LIST))

      # Create the dynamic header file that will carry all the protocols and services includes
      temp_list_all_modules := $(addsuffix $(quotes),\
        $(addprefix \#include:$(quotes),\
          $(sort $(temp_modules_main_header_list)) \
        )\
      )
      COMPLETE_PROTOCOL_SERVICE_LIST:=$(subst :,$(space),\
        $(subst $(space),$(linefeed),\
          $(temp_list_all_modules)\
        )\
      )
      CFLAGS += -DIOTUS_DYNAMIC_HEADER_FILE=\"$(IOTUS_DYNAMIC_HEADER_FILE)\"

      $(file >$(IOTUS_FOLDER)/$(IOTUS_DYNAMIC_HEADER_FILE),$(COMPLETE_PROTOCOL_SERVICE_LIST))

      ######################################################################################
      ifeq ($(IOTUS_CONF_USING_TRANSPORT),1)
      CFLAGS += -DIOTUS_STATIC_PROTOCOL_TRANSPORT=$(IOTUS_STATIC_PROTOCOL_TRANSPORT)
      endif
      ifeq ($(IOTUS_CONF_USING_ROUTING),1)
      CFLAGS += -DIOTUS_STATIC_PROTOCOL_ROUTING=$(IOTUS_STATIC_PROTOCOL_ROUTING)
      endif
      ifeq ($(IOTUS_CONF_USING_DATA_LINK),1)
      CFLAGS += -DIOTUS_STATIC_PROTOCOL_DATA_LINK=$(IOTUS_STATIC_PROTOCOL_DATA_LINK)
      endif
      CFLAGS += -DIOTUS_STATIC_PROTOCOL_RADIO_DRIVER=$(IOTUS_STATIC_PROTOCOL_RADIO_DRIVER)
      ######################################################################################

    #$%^$%^$^$^$^#$#%@#%$#%@#$%$@%$#^#$^@#$$^%$^@#$#$^$%^%@$#$^%^@$##$#@$%%$^^$EWEWR^^^$#%@$#%^@$%@
    #$%^$%^$^$^$^#$#%@#%$#%@#$%$@%$#^#$^   FAILED...   %^%@$#$^%^@$##$#@$%%$^^$EWEWR^^^$#%@$#%^@$%@
    #$%^$%^$^$^$^#$#%@#%$#%@#$%$@%$#^#$^@#$$^%$^@#$#$^$%^%@$#$^%^@$##$#@$%%$^^$EWEWR^^^$#%@$#%^@$%@
    else
      $(error IoTUS net stack requires IOTUS_CONF_COMPILE_MODE defined as DYNAMIC or STATIC!)
    endif
  endif
else
  $(error IoTUS net stack requires IOTUS_CONF_COMPILE_MODE defined as DYNAMIC or STATIC!)
endif
MODULES += $(IOTUS_FOLDER_MAIN) $(RELATIVE_FOLDER_SHARED_UTILS) $(RELATIVE_FOLDER_NET_DEFINES)
